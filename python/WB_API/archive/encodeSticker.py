import base64
import transliterate
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF
import PyPDF2
import xlrd


def read_xlsx(file_path, num=0, title='Yes'):
    '''Считывает построчно xlsx файл и возращает список словарей - если title = 'Yes', список списков - если title = 'No'
    '''
    rd = xlrd.open_workbook(file_path)
    sheet = rd.sheet_by_index(num)
    if title == 'Yes':
        Name_row = sheet.row_values(0)
        start = 1
    elif title == 'No':
        Name_row = None
        start = 0
    data = []
    for rownum in range(start, sheet.nrows):
        row = sheet.row_values(rownum)
        if title == 'Yes':
            dct = {}
            for i, cel in enumerate(row):
                tmp = {Name_row[i]: cel}
                dct.update(tmp)
            data.append(dct)
        elif title == 'No':
            data.append(row)
    return data


pdf_writer = PyPDF2.PdfFileWriter()
data_all = read_xlsx(
    r'D:\ФБС без принтов 11.08.21.xlsx', 0, 'Yes')
a = data_all[0]['Название']
dataSVG = '<?xml version = "1.0"?> <!-- Generated by SVGo --> <svg width = "400" height = "300" xmlns = "http://www.w3.org/2000/svg" xmlns:xlink = "http://www.w3.org/1999/xlink" > <text x = "200" y = "100" style = "fill:black;font-size:19;text-anchor:middle" >{}</text><text x = "200" y = "150" style = "fill:black;font-size:19;text-anchor:middle" >{}</text></svg >'.format(
    transliterate.translit(
        a[0:len(a)//2], reversed=True), transliterate.translit(a[len(a)//2:], reversed=True))
f = open(r'D:\temp.SVG', "w", encoding='utf-8')
f.write(dataSVG)
f.close()
drawing = svg2rlg(r'D:\temp.SVG')
renderPDF.drawToFile(drawing, r'D:\temp.PDF')
pdf_file = PyPDF2.PdfFileReader(open(r'D:\temp.PDF', 'rb'))
page = pdf_file.getPage(0)
page.mediaBox.upperRight = (370, 280)
page.mediaBox.upperLeft = (20, 280)
page.mediaBox.lowerRight = (370, 15)
pdf_writer.addPage(page)
datanew = read_xlsx(
    r'C:\Users\Public\Documents\WBHelpTools\GetOrders\Data_order.xlsx', 0, 'Yes')
for data in data_all:
    a1 = data['Название']
    if a != a1:
        a = data['Название']
        dataSVG = '<?xml version = "1.0"?> <!-- Generated by SVGo --> <svg width = "400" height = "300" xmlns = "http://www.w3.org/2000/svg" xmlns:xlink = "http://www.w3.org/1999/xlink" > <text x = "200" y = "100" style = "fill:black;font-size:19;text-anchor:middle" >{}</text><text x = "200" y = "150" style = "fill:black;font-size:19;text-anchor:middle" >{}</text></svg >'.format(
            transliterate.translit(
                a[0:len(a)//2], reversed=True), transliterate.translit(a[len(a)//2:], reversed=True))
        f = open(r'D:\temp.SVG', "wb")
        f.write(bytearray(dataSVG, 'utf-8'))
        f.close()
        drawing = svg2rlg(r'D:\temp.SVG')
        renderPDF.drawToFile(drawing, r'D:\temp.PDF')
        pdf_file = PyPDF2.PdfFileReader(
            open(r'D:\temp.PDF', 'rb'))
        page = pdf_file.getPage(0)
        page.mediaBox.upperRight = (370, 280)
        page.mediaBox.upperLeft = (20, 280)
        page.mediaBox.lowerRight = (370, 15)
        pdf_writer.addPage(page)
    for datanewline in datanew:
        if data['Номер задания'] == datanewline['orderId']:
            Base64 = bytes(datanewline['wbStickerSvgBase64'], 'utf-8')
            break
    png_recovered = base64.decodestring(Base64)
    f = open(r'D:\temp.SVG', "wb")
    f.write(png_recovered)
    f.close()

    drawing = svg2rlg(r'D:\temp.SVG')
    renderPDF.drawToFile(drawing, r'D:\temp.PDF')
    pdf_file = PyPDF2.PdfFileReader(
        open(r'D:\temp.PDF', 'rb'))
    page = pdf_file.getPage(0)
    page.mediaBox.upperRight = (370, 280)
    page.mediaBox.upperLeft = (20, 280)
    page.mediaBox.lowerRight = (370, 15)
    pdf_writer.addPage(page)
with open(r'D:\ФБС без принтов 11.08.21.pdf', 'wb') as out_file:
    pdf_writer.write(out_file)
