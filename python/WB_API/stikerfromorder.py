import base64
import transliterate
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF
import PyPDF2
from fpdf import FPDF
import barcode
from barcode.writer import ImageWriter
import xlrd


def read_xlsx(file_path, num=0, title='Yes'):
    '''Считывает построчно xlsx файл и возращает список словарей - если title = 'Yes', список списков - если title = 'No'
    '''
    rd = xlrd.open_workbook(file_path)
    sheet = rd.sheet_by_index(num)
    if title == 'Yes':
        Name_row = sheet.row_values(0)
        start = 1
    elif title == 'No':
        Name_row = None
        start = 0
    data = []
    for rownum in range(start, sheet.nrows):
        row = sheet.row_values(rownum)
        if title == 'Yes':
            dct = {}
            for i, cel in enumerate(row):
                tmp = {Name_row[i]: cel}
                dct.update(tmp)
            data.append(dct)
        elif title == 'No':
            data.append(row)
    return data


pdf_writer = PyPDF2.PdfFileWriter()
path_to_file = r'D:\ФБС принты 12.08.21.xlsx'

image_path = 'D:\ean13.png'


def add_image(image_path, barcode_order):
    options = dict(module_height=5.0, text_distance=1.0, format='PNG')
    ean = barcode.get('ean13', str(barcode_order)[0:-2],
                      ImageWriter())
    ean.save('D:\ean13', options)
    size = (400, 300)
    pdf = FPDF(format=size)
    pdf.add_page()
    pdf.image(image_path, x=-50, y=190, w=500)
    pdf.add_font(
        'DejaVu', '', r'C:\Users\user\Downloads\font\DejaVuSansCondensed.ttf', uni=True)
    pdf.set_font('DejaVu', '', 60)
    name_list = read_xlsx(r'D:\Список номенклатуры.XLSX')
    for name in name_list:
        if str(barcode_order)[0:-2] == name['Баркод']:
            case_name = name['Название']
            Art = name['Артикул поставщика']
    pdf.multi_cell(380, 25, txt="{}".format(
        case_name))
    pdf.set_font('DejaVu', '', 50)
    pdf.multi_cell(380, 25, txt="{}".format(
        'Продавец: ИП Караханян Э.С'))
    pdf.multi_cell(380, 25, txt="{}".format(
        Art))
    pdf.output(r"D:\add_image.pdf")


data_all = read_xlsx(path_to_file, 1)
datanew = read_xlsx(
    r'C:\Users\Public\Documents\WBHelpTools\MakeWBStikersWithName\WBOrdersData\Data_orders.xlsx')
n = 1
a = 'Стол_{}'.format(str(n))
dataSVG = '<?xml version = "1.0"?> <!-- Generated by SVGo --> <svg width = "400" height = "300" xmlns = "http://www.w3.org/2000/svg" xmlns:xlink = "http://www.w3.org/1999/xlink" > <text x = "200" y = "150" style = "fill:black;font-size:30;text-anchor:middle" >{}</text></svg >'.format(
    transliterate.translit(a, reversed=True))
f = open(r'D:\temp.SVG', "w", encoding='utf-8')
f.write(dataSVG)
f.close()
drawing = svg2rlg(r'D:\temp.SVG')
renderPDF.drawToFile(drawing, r'D:\temp.PDF')
pdf_file = PyPDF2.PdfFileReader(open(r'D:\temp.PDF', 'rb'))
page = pdf_file.getPage(0)
page.mediaBox.upperRight = (370, 280)
page.mediaBox.upperLeft = (20, 280)
page.mediaBox.lowerRight = (370, 15)
page.scaleBy(10.0)
pdf_writer.addPage(page)
for data in data_all:
    if data['Номер задания'] == '':
        n = n+1
        a = 'Стол_{}'.format(str(n))
        dataSVG = '<?xml version = "1.0"?> <!-- Generated by SVGo --> <svg width = "400" height = "300" xmlns = "http://www.w3.org/2000/svg" xmlns:xlink = "http://www.w3.org/1999/xlink" > <text x = "200" y = "100" style = "fill:black;font-size:30;text-anchor:middle" >{}</text>'.format(
            transliterate.translit(a, reversed=True))
        f = open(r'D:\temp.SVG', "wb")
        f.write(bytearray(dataSVG, 'utf-8'))
        f.close()
        drawing = svg2rlg(r'D:\temp.SVG')
        renderPDF.drawToFile(drawing, r'D:\temp.PDF')
        pdf_file = PyPDF2.PdfFileReader(
            open(r'D:\temp.PDF', 'rb'))
        page = pdf_file.getPage(0)
        page.mediaBox.upperRight = (370, 280)
        page.mediaBox.upperLeft = (20, 280)
        page.mediaBox.lowerRight = (370, 15)
        page.scaleBy(10.0)
        pdf_writer.addPage(page)
        continue
    for datanewline in datanew:
        if str(data['Номер задания'])[0:-2] == str(datanewline['orderId'])[0:-2]:
            Base64 = bytes(datanewline['wbStickerSvgBase64'], 'utf-8')
            barcode_order = datanewline['barcode']
            break
    png_recovered = base64.decodestring(Base64)
    f = open(r'D:\temp.SVG', "wb")
    f.write(png_recovered)
    f.close()

    drawing = svg2rlg(r'D:\temp.SVG')
    renderPDF.drawToFile(drawing, r'D:\temp.PDF')
    pdf_file = PyPDF2.PdfFileReader(
        open(r'D:\temp.PDF', 'rb'))
    page = pdf_file.getPage(0)
    page.mediaBox.upperRight = (370, 280)
    page.mediaBox.upperLeft = (20, 280)
    page.mediaBox.lowerRight = (370, 15)
    page.scaleBy(10.0)
    pdf_writer.addPage(page)
    '''#add_image(image_path, barcode_order)
    pdf_file = PyPDF2.PdfFileReader(
        open(r'D:\add_image.pdf', 'rb'))
    page = pdf_file.getPage(0)
    pdf_writer.addPage(page)'''
with open(path_to_file.replace('xlsx', 'PDF'), 'wb') as out_file:
    pdf_writer.write(out_file)
